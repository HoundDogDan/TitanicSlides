findpackage("devtools")
find.package("devtools")
install.packages("devtools")
libary(devtools)
library(devyools)
library(devtools)
library("devtools", lib.loc="~/R/win-library/3.1")
R.version.string
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating","test")
colnames(my_data, cnames)
colnames(cnames, my_data
)
play()
?colnames
colnames(my_data) < cnames
colnames(my_data) <- cnames
nxt()
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 ==7)
FALSE && FALSE
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 ==6, !FALSE)
ints <- sampel(10)
ints <- sample(10)
ints
ints > 5
which(ints>5)
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(C(2,4,5))
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("This is a telegram")
submit()
mad_libs(noun="House", place="Tennessee", adj="floating")
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,  length)
sapply(unique_vals,  length)
sapply(flags, unique)
info()
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
play()
object.size(plants) /1024
object.size(plants) /1024 /1024
nxt()
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample( c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
play
play()
rbinom("a", size=100, prob=0.7)
rbinom(c("a","b"), size=100, prob=0.7)
nxt()
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, 10 )
my_pois <- replicate(100, rpois(5, 10 ))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
t4 <<- strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time - t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
data(cars)
info.file(cars)
?cars
head(cars, 10)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, ylab="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist,  ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance", main="My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", title="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(data=mtcars, mpg ~ cyl)
boxplot(data=mtcars, formula=mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
getwd()
rm(list=ls())
ls()
list.files()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("rprog-scripts-submitscript1.R")
submit()
submit()
pollutantmean("specdata", "nitrate", 70:72)
submit()
submit(manual=TRUE)
submit(manual=TRUE)
submit(manual=TRUE)
rm(list=ls())
library(datasets)
data(iris)
?iris
Sepal.Length
?Sepal.Length
dimnames(iris)
iris$Sepal.Length
iris$Species
?mean
?colMeans
?iris
sapply(split(iris.x, iris.s), function(x) apply(x, 2, mean))
apply(iris.x, 2, function(x) tapply(x, iris.s, mean))
list(Species=iris$Species)
?subset
subset(iris$Species)
subset(iris$Species, ...)
head(airquality)
head(iris)
class(iris)
?tapply
head(iris)
tapply(iris$Sepal.Lenght, list(iris$Species), mean)
tapply(iris$Sepal.Length, list(iris$Species), mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
v <- apply(iris[, 1:4], 2, mean)
class(v)
summary(v)
v
?apply
apply(iris, 2, mean)
iris[,1:4]
apply(iris[, 1:4], 2, mean)
?apply
rm(list=ls9)
rm(list=ls())
library(datasets)
data(mtcars)
head(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
?tapply
avg_dif < 26.66364 - 15.1
avg_dif <- 26.66364 - 15.1
avg_diff
avg_dif
debug(ls)
ls()
resume
recover
0
?debug
x
exit
q
Q
Q
ls()
fileUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
library(XML)
install.package(XML)
install.packages(XML)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
getwd()
?readTable
read.csv
?read.csv
dd <- read.csv("data.txt")
sum(dd)
dd <- read.csv("data.txt", header=FALSE)
sum(dd)
dd <- read.csv("data.txt", header=TRUE)
sum(dd)
rm(dd)
rm(con)
rm(list=ls())
tt <- read.csv("data.txt")
tt <- read.csv("data.txt")
sum(tt)
tx <- read.csv("justone.txt")
sum(tx)
rm(list=ls())
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
str(mpg)
qplot(mpg)
qplot(disp, hwy, data = mpg
)
qplot(displ, hwy, data = mpg)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
g <- xyplot(weight ~ Time | Diet, BodyWeight)
class(g)
?text
?axis
?points
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?par
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library("ggplot2", lib.loc="~/R/win-library/3.1")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
?qplot
?ggplot2
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
movies
ggplot(movies, aes(votes, rating)
)
str(movies)
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
rm(list=ls())
qplot(votes, rating, data = movies) + geom_smooth()
?splom
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?text
?splom
?trellis.par.set()
?lines
?panel.abline
?text
rnorm(10)
rnorm(1000*10)
nosim <- 1000
n <- 10
?matrix
matrix(1,1)
m <- matrix(rnorm(nosim*n), nosim)
sd(apply(matrix(rnorm(10000),1000), 1, mean))
sd(apply(matrix(rnorm(10000),1000), 1, mean))
sd(apply(matrix(rnorm(10000),1000), 1, mean))
sd(apply(matrix(runif(10000),1000), 1, mean))
sd(apply(matrix(rpois(10000),1000), 1, mean))
sd(apply(matrix(rpois(10000,4), 1000),1 , mean))
install.packages("rCharts")
install.packages("devtools")
library(devtools)
devtools::install_github("rCharts","ramnathv")
install.packages("devtools")
library(devtools)
options(install.packages.check.source="no")
install_github('slidify','ramnathv')
install.packages("stringi")
library("stringi", lib.loc="~/R/win-library/3.1")
library("devtools", lib.loc="~/R/win-library/3.1")
install_github('slidify','ramnathv')
library(slidify)
setwd("E:/DataApps/TitanicSlides")
author("TitanicDeck")
slidify(index.Rmd)
setwd("E:/DataApps/TitanicSlides/TitanicDeck")
setwd("E:/DataApps/TitanicSlides/TitanicDeck")
slidify(index.Rmd)
slidify('index.Rmd')
publish(user=HoundDogDan, repo=TitanicSlides)
publish(user='HoundDogDan', repo='TitanicSlides')
browseURL('index.html')
browseURL('http://HoundDogDan.github.io/TitanicSlides')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
